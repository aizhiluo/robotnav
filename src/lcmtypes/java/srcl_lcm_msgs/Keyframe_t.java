/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package srcl_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Keyframe_t implements lcm.lcm.LCMEncodable
{
    public float position[];
    public float velocity[];
    public float yaw;
    public boolean vel_constr;
 
    public Keyframe_t()
    {
        position = new float[3];
        velocity = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc5f4c6b7363280a5L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(srcl_lcm_msgs.Keyframe_t.class))
            return 0L;
 
        classes.add(srcl_lcm_msgs.Keyframe_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.position[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.velocity[a]); 
        }
 
        outs.writeFloat(this.yaw); 
 
        outs.writeByte( this.vel_constr ? 1 : 0); 
 
    }
 
    public Keyframe_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Keyframe_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static srcl_lcm_msgs.Keyframe_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        srcl_lcm_msgs.Keyframe_t o = new srcl_lcm_msgs.Keyframe_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.position = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.position[a] = ins.readFloat();
        }
 
        this.velocity = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.velocity[a] = ins.readFloat();
        }
 
        this.yaw = ins.readFloat();
 
        this.vel_constr = ins.readByte()!=0;
 
    }
 
    public srcl_lcm_msgs.Keyframe_t copy()
    {
        srcl_lcm_msgs.Keyframe_t outobj = new srcl_lcm_msgs.Keyframe_t();
        outobj.position = new float[(int) 3];
        System.arraycopy(this.position, 0, outobj.position, 0, 3); 
        outobj.velocity = new float[(int) 3];
        System.arraycopy(this.velocity, 0, outobj.velocity, 0, 3); 
        outobj.yaw = this.yaw;
 
        outobj.vel_constr = this.vel_constr;
 
        return outobj;
    }
 
}

