/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package srcl_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class KeyframeSet_t implements lcm.lcm.LCMEncodable
{
    public long kf_num;
    public srcl_lcm_msgs.Keyframe_t kfs[];
    public srcl_lcm_msgs.TimeStamp_t sys_time;
    public long path_id;
 
    public KeyframeSet_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7e244a5374dace1fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(srcl_lcm_msgs.KeyframeSet_t.class))
            return 0L;
 
        classes.add(srcl_lcm_msgs.KeyframeSet_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + srcl_lcm_msgs.Keyframe_t._hashRecursive(classes)
             + srcl_lcm_msgs.TimeStamp_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.kf_num); 
 
        for (int a = 0; a < this.kf_num; a++) {
            this.kfs[a]._encodeRecursive(outs); 
        }
 
        this.sys_time._encodeRecursive(outs); 
 
        outs.writeLong(this.path_id); 
 
    }
 
    public KeyframeSet_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public KeyframeSet_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static srcl_lcm_msgs.KeyframeSet_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        srcl_lcm_msgs.KeyframeSet_t o = new srcl_lcm_msgs.KeyframeSet_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.kf_num = ins.readLong();
 
        this.kfs = new srcl_lcm_msgs.Keyframe_t[(int) kf_num];
        for (int a = 0; a < this.kf_num; a++) {
            this.kfs[a] = srcl_lcm_msgs.Keyframe_t._decodeRecursiveFactory(ins);
        }
 
        this.sys_time = srcl_lcm_msgs.TimeStamp_t._decodeRecursiveFactory(ins);
 
        this.path_id = ins.readLong();
 
    }
 
    public srcl_lcm_msgs.KeyframeSet_t copy()
    {
        srcl_lcm_msgs.KeyframeSet_t outobj = new srcl_lcm_msgs.KeyframeSet_t();
        outobj.kf_num = this.kf_num;
 
        outobj.kfs = new srcl_lcm_msgs.Keyframe_t[(int) kf_num];
        for (int a = 0; a < this.kf_num; a++) {
            outobj.kfs[a] = this.kfs[a].copy();
        }
 
        outobj.sys_time = this.sys_time.copy();
 
        outobj.path_id = this.path_id;
 
        return outobj;
    }
 
}

