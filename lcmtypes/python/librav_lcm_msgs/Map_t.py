"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import librav_lcm_msgs.Voxel_t

import librav_lcm_msgs.Cell_t

class Map_t(object):
    __slots__ = ["size_x", "size_y", "size_z", "cell_num", "cells", "voxel_num", "voxels"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int64_t", "librav_lcm_msgs.Cell_t", "int64_t", "librav_lcm_msgs.Voxel_t"]

    __dimensions__ = [None, None, None, None, ["cell_num"], None, ["voxel_num"]]

    def __init__(self):
        self.size_x = 0
        self.size_y = 0
        self.size_z = 0
        self.cell_num = 0
        self.cells = []
        self.voxel_num = 0
        self.voxels = []

    def encode(self):
        buf = BytesIO()
        buf.write(Map_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiiq", self.size_x, self.size_y, self.size_z, self.cell_num))
        for i0 in range(self.cell_num):
            assert self.cells[i0]._get_packed_fingerprint() == librav_lcm_msgs.Cell_t._get_packed_fingerprint()
            self.cells[i0]._encode_one(buf)
        buf.write(struct.pack(">q", self.voxel_num))
        for i0 in range(self.voxel_num):
            assert self.voxels[i0]._get_packed_fingerprint() == librav_lcm_msgs.Voxel_t._get_packed_fingerprint()
            self.voxels[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Map_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Map_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Map_t()
        self.size_x, self.size_y, self.size_z, self.cell_num = struct.unpack(">iiiq", buf.read(20))
        self.cells = []
        for i0 in range(self.cell_num):
            self.cells.append(librav_lcm_msgs.Cell_t._decode_one(buf))
        self.voxel_num = struct.unpack(">q", buf.read(8))[0]
        self.voxels = []
        for i0 in range(self.voxel_num):
            self.voxels.append(librav_lcm_msgs.Voxel_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Map_t in parents: return 0
        newparents = parents + [Map_t]
        tmphash = (0x46a945be7dfca6b8+ librav_lcm_msgs.Cell_t._get_hash_recursive(newparents)+ librav_lcm_msgs.Voxel_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Map_t._packed_fingerprint is None:
            Map_t._packed_fingerprint = struct.pack(">Q", Map_t._get_hash_recursive([]))
        return Map_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

