"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ScalarField_t(object):
    __slots__ = ["size_x", "size_y", "value"]

    __typenames__ = ["int32_t", "int32_t", "double"]

    __dimensions__ = [None, None, ["size_x", "size_y"]]

    def __init__(self):
        self.size_x = 0
        self.size_y = 0
        self.value = []

    def encode(self):
        buf = BytesIO()
        buf.write(ScalarField_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.size_x, self.size_y))
        for i0 in range(self.size_x):
            buf.write(struct.pack('>%dd' % self.size_y, *self.value[i0][:self.size_y]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ScalarField_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ScalarField_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ScalarField_t()
        self.size_x, self.size_y = struct.unpack(">ii", buf.read(8))
        self.value = []
        for i0 in range(self.size_x):
            self.value.append(struct.unpack('>%dd' % self.size_y, buf.read(self.size_y * 8)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ScalarField_t in parents: return 0
        tmphash = (0xde0a5393ac2edb03) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ScalarField_t._packed_fingerprint is None:
            ScalarField_t._packed_fingerprint = struct.pack(">Q", ScalarField_t._get_hash_recursive([]))
        return ScalarField_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

