"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import librav_lcm_msgs.Edge_t

import librav_lcm_msgs.Vertex_t

class Graph_t(object):
    __slots__ = ["edge_num", "vertex_num", "vertices", "edges"]

    __typenames__ = ["int64_t", "int64_t", "librav_lcm_msgs.Vertex_t", "librav_lcm_msgs.Edge_t"]

    __dimensions__ = [None, None, ["vertex_num"], ["edge_num"]]

    def __init__(self):
        self.edge_num = 0
        self.vertex_num = 0
        self.vertices = []
        self.edges = []

    def encode(self):
        buf = BytesIO()
        buf.write(Graph_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qq", self.edge_num, self.vertex_num))
        for i0 in range(self.vertex_num):
            assert self.vertices[i0]._get_packed_fingerprint() == librav_lcm_msgs.Vertex_t._get_packed_fingerprint()
            self.vertices[i0]._encode_one(buf)
        for i0 in range(self.edge_num):
            assert self.edges[i0]._get_packed_fingerprint() == librav_lcm_msgs.Edge_t._get_packed_fingerprint()
            self.edges[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Graph_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Graph_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Graph_t()
        self.edge_num, self.vertex_num = struct.unpack(">qq", buf.read(16))
        self.vertices = []
        for i0 in range(self.vertex_num):
            self.vertices.append(librav_lcm_msgs.Vertex_t._decode_one(buf))
        self.edges = []
        for i0 in range(self.edge_num):
            self.edges.append(librav_lcm_msgs.Edge_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Graph_t in parents: return 0
        newparents = parents + [Graph_t]
        tmphash = (0xd1b7a0c2dd255080+ librav_lcm_msgs.Vertex_t._get_hash_recursive(newparents)+ librav_lcm_msgs.Edge_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Graph_t._packed_fingerprint is None:
            Graph_t._packed_fingerprint = struct.pack(">Q", Graph_t._get_hash_recursive([]))
        return Graph_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

