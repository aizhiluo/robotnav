"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class Cell_t(object):
    __slots__ = ["id", "pos_x", "pos_y", "occupied"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "boolean"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.id = 0
        self.pos_x = 0
        self.pos_y = 0
        self.occupied = False

    def encode(self):
        buf = BytesIO()
        buf.write(Cell_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiib", self.id, self.pos_x, self.pos_y, self.occupied))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Cell_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Cell_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Cell_t()
        self.id, self.pos_x, self.pos_y = struct.unpack(">iii", buf.read(12))
        self.occupied = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Cell_t in parents: return 0
        tmphash = (0xf1e9f7284e22a8b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Cell_t._packed_fingerprint is None:
            Cell_t._packed_fingerprint = struct.pack(">Q", Cell_t._get_hash_recursive([]))
        return Cell_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

