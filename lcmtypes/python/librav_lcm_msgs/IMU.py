"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import librav_lcm_msgs.Quaternion

import librav_lcm_msgs.Vector3

class IMU(object):
    __slots__ = ["mtime", "orientation", "orientation_covariance", "angular_velocity", "angular_velocity_covariance", "linear_acceleration", "linear_acceleration_covariance"]

    __typenames__ = ["int64_t", "librav_lcm_msgs.Quaternion", "double", "librav_lcm_msgs.Vector3", "double", "librav_lcm_msgs.Vector3", "double"]

    __dimensions__ = [None, None, [9], None, [9], None, [9]]

    def __init__(self):
        self.mtime = 0
        self.orientation = librav_lcm_msgs.Quaternion()
        self.orientation_covariance = [ 0.0 for dim0 in range(9) ]
        self.angular_velocity = librav_lcm_msgs.Vector3()
        self.angular_velocity_covariance = [ 0.0 for dim0 in range(9) ]
        self.linear_acceleration = librav_lcm_msgs.Vector3()
        self.linear_acceleration_covariance = [ 0.0 for dim0 in range(9) ]

    def encode(self):
        buf = BytesIO()
        buf.write(IMU._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.mtime))
        assert self.orientation._get_packed_fingerprint() == librav_lcm_msgs.Quaternion._get_packed_fingerprint()
        self.orientation._encode_one(buf)
        buf.write(struct.pack('>9d', *self.orientation_covariance[:9]))
        assert self.angular_velocity._get_packed_fingerprint() == librav_lcm_msgs.Vector3._get_packed_fingerprint()
        self.angular_velocity._encode_one(buf)
        buf.write(struct.pack('>9d', *self.angular_velocity_covariance[:9]))
        assert self.linear_acceleration._get_packed_fingerprint() == librav_lcm_msgs.Vector3._get_packed_fingerprint()
        self.linear_acceleration._encode_one(buf)
        buf.write(struct.pack('>9d', *self.linear_acceleration_covariance[:9]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != IMU._get_packed_fingerprint():
            raise ValueError("Decode error")
        return IMU._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = IMU()
        self.mtime = struct.unpack(">q", buf.read(8))[0]
        self.orientation = librav_lcm_msgs.Quaternion._decode_one(buf)
        self.orientation_covariance = struct.unpack('>9d', buf.read(72))
        self.angular_velocity = librav_lcm_msgs.Vector3._decode_one(buf)
        self.angular_velocity_covariance = struct.unpack('>9d', buf.read(72))
        self.linear_acceleration = librav_lcm_msgs.Vector3._decode_one(buf)
        self.linear_acceleration_covariance = struct.unpack('>9d', buf.read(72))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if IMU in parents: return 0
        newparents = parents + [IMU]
        tmphash = (0xac2e31fe8e135e97+ librav_lcm_msgs.Quaternion._get_hash_recursive(newparents)+ librav_lcm_msgs.Vector3._get_hash_recursive(newparents)+ librav_lcm_msgs.Vector3._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if IMU._packed_fingerprint is None:
            IMU._packed_fingerprint = struct.pack(">Q", IMU._get_hash_recursive([]))
        return IMU._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

