/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package librav_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class PolynomialCurve_t implements lcm.lcm.LCMEncodable
{
    public long seg_num;
    public librav_lcm_msgs.PolyCurveSegment_t segments[];
    public int wp_num;
    public librav_lcm_msgs.WayPoint_t waypoints[];
    public librav_lcm_msgs.TimeStamp_t start_time;
    public long trajectory_id;
    public float scaling_factor;
 
    public PolynomialCurve_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xb6932b5031a4ffe5L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(librav_lcm_msgs.PolynomialCurve_t.class))
            return 0L;
 
        classes.add(librav_lcm_msgs.PolynomialCurve_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + librav_lcm_msgs.PolyCurveSegment_t._hashRecursive(classes)
             + librav_lcm_msgs.WayPoint_t._hashRecursive(classes)
             + librav_lcm_msgs.TimeStamp_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.seg_num); 
 
        for (int a = 0; a < this.seg_num; a++) {
            this.segments[a]._encodeRecursive(outs); 
        }
 
        outs.writeInt(this.wp_num); 
 
        for (int a = 0; a < this.wp_num; a++) {
            this.waypoints[a]._encodeRecursive(outs); 
        }
 
        this.start_time._encodeRecursive(outs); 
 
        outs.writeLong(this.trajectory_id); 
 
        outs.writeFloat(this.scaling_factor); 
 
    }
 
    public PolynomialCurve_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public PolynomialCurve_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static librav_lcm_msgs.PolynomialCurve_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        librav_lcm_msgs.PolynomialCurve_t o = new librav_lcm_msgs.PolynomialCurve_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.seg_num = ins.readLong();
 
        this.segments = new librav_lcm_msgs.PolyCurveSegment_t[(int) seg_num];
        for (int a = 0; a < this.seg_num; a++) {
            this.segments[a] = librav_lcm_msgs.PolyCurveSegment_t._decodeRecursiveFactory(ins);
        }
 
        this.wp_num = ins.readInt();
 
        this.waypoints = new librav_lcm_msgs.WayPoint_t[(int) wp_num];
        for (int a = 0; a < this.wp_num; a++) {
            this.waypoints[a] = librav_lcm_msgs.WayPoint_t._decodeRecursiveFactory(ins);
        }
 
        this.start_time = librav_lcm_msgs.TimeStamp_t._decodeRecursiveFactory(ins);
 
        this.trajectory_id = ins.readLong();
 
        this.scaling_factor = ins.readFloat();
 
    }
 
    public librav_lcm_msgs.PolynomialCurve_t copy()
    {
        librav_lcm_msgs.PolynomialCurve_t outobj = new librav_lcm_msgs.PolynomialCurve_t();
        outobj.seg_num = this.seg_num;
 
        outobj.segments = new librav_lcm_msgs.PolyCurveSegment_t[(int) seg_num];
        for (int a = 0; a < this.seg_num; a++) {
            outobj.segments[a] = this.segments[a].copy();
        }
 
        outobj.wp_num = this.wp_num;
 
        outobj.waypoints = new librav_lcm_msgs.WayPoint_t[(int) wp_num];
        for (int a = 0; a < this.wp_num; a++) {
            outobj.waypoints[a] = this.waypoints[a].copy();
        }
 
        outobj.start_time = this.start_time.copy();
 
        outobj.trajectory_id = this.trajectory_id;
 
        outobj.scaling_factor = this.scaling_factor;
 
        return outobj;
    }
 
}

