/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package librav_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class VehicleFootprint implements lcm.lcm.LCMEncodable
{
    public librav_lcm_msgs.Vector2 points[];
 
    public VehicleFootprint()
    {
        points = new librav_lcm_msgs.Vector2[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x6992dd1ff10ce212L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(librav_lcm_msgs.VehicleFootprint.class))
            return 0L;
 
        classes.add(librav_lcm_msgs.VehicleFootprint.class);
        long hash = LCM_FINGERPRINT_BASE
             + librav_lcm_msgs.Vector2._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 4; a++) {
            this.points[a]._encodeRecursive(outs); 
        }
 
    }
 
    public VehicleFootprint(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public VehicleFootprint(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static librav_lcm_msgs.VehicleFootprint _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        librav_lcm_msgs.VehicleFootprint o = new librav_lcm_msgs.VehicleFootprint();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.points = new librav_lcm_msgs.Vector2[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.points[a] = librav_lcm_msgs.Vector2._decodeRecursiveFactory(ins);
        }
 
    }
 
    public librav_lcm_msgs.VehicleFootprint copy()
    {
        librav_lcm_msgs.VehicleFootprint outobj = new librav_lcm_msgs.VehicleFootprint();
        outobj.points = new librav_lcm_msgs.Vector2[(int) 4];
        for (int a = 0; a < 4; a++) {
            outobj.points[a] = this.points[a].copy();
        }
 
        return outobj;
    }
 
}

