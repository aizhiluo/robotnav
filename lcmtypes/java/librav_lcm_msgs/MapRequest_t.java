/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package librav_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class MapRequest_t implements lcm.lcm.LCMEncodable
{
    public boolean new_map_requested;
    public int map_size_x;
    public int map_size_y;
    public int map_size_z;
    public byte map_type;
 
    public MapRequest_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8d93c0970f12ad5bL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(librav_lcm_msgs.MapRequest_t.class))
            return 0L;
 
        classes.add(librav_lcm_msgs.MapRequest_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte( this.new_map_requested ? 1 : 0); 
 
        outs.writeInt(this.map_size_x); 
 
        outs.writeInt(this.map_size_y); 
 
        outs.writeInt(this.map_size_z); 
 
        outs.writeByte(this.map_type); 
 
    }
 
    public MapRequest_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public MapRequest_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static librav_lcm_msgs.MapRequest_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        librav_lcm_msgs.MapRequest_t o = new librav_lcm_msgs.MapRequest_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.new_map_requested = ins.readByte()!=0;
 
        this.map_size_x = ins.readInt();
 
        this.map_size_y = ins.readInt();
 
        this.map_size_z = ins.readInt();
 
        this.map_type = ins.readByte();
 
    }
 
    public librav_lcm_msgs.MapRequest_t copy()
    {
        librav_lcm_msgs.MapRequest_t outobj = new librav_lcm_msgs.MapRequest_t();
        outobj.new_map_requested = this.new_map_requested;
 
        outobj.map_size_x = this.map_size_x;
 
        outobj.map_size_y = this.map_size_y;
 
        outobj.map_size_z = this.map_size_z;
 
        outobj.map_type = this.map_type;
 
        return outobj;
    }
 
}

