/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package librav_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class PolyCurveSegment_t implements lcm.lcm.LCMEncodable
{
    public int coeffsize_x;
    public int coeffsize_y;
    public int coeffsize_z;
    public int coeffsize_yaw;
    public double coeffs_x[];
    public double coeffs_y[];
    public double coeffs_z[];
    public double coeffs_yaw[];
    public double t_start;
    public double t_end;
 
    public PolyCurveSegment_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xfd820417caf41e97L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(librav_lcm_msgs.PolyCurveSegment_t.class))
            return 0L;
 
        classes.add(librav_lcm_msgs.PolyCurveSegment_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.coeffsize_x); 
 
        outs.writeInt(this.coeffsize_y); 
 
        outs.writeInt(this.coeffsize_z); 
 
        outs.writeInt(this.coeffsize_yaw); 
 
        for (int a = 0; a < this.coeffsize_x; a++) {
            outs.writeDouble(this.coeffs_x[a]); 
        }
 
        for (int a = 0; a < this.coeffsize_y; a++) {
            outs.writeDouble(this.coeffs_y[a]); 
        }
 
        for (int a = 0; a < this.coeffsize_z; a++) {
            outs.writeDouble(this.coeffs_z[a]); 
        }
 
        for (int a = 0; a < this.coeffsize_yaw; a++) {
            outs.writeDouble(this.coeffs_yaw[a]); 
        }
 
        outs.writeDouble(this.t_start); 
 
        outs.writeDouble(this.t_end); 
 
    }
 
    public PolyCurveSegment_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public PolyCurveSegment_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static librav_lcm_msgs.PolyCurveSegment_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        librav_lcm_msgs.PolyCurveSegment_t o = new librav_lcm_msgs.PolyCurveSegment_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.coeffsize_x = ins.readInt();
 
        this.coeffsize_y = ins.readInt();
 
        this.coeffsize_z = ins.readInt();
 
        this.coeffsize_yaw = ins.readInt();
 
        this.coeffs_x = new double[(int) coeffsize_x];
        for (int a = 0; a < this.coeffsize_x; a++) {
            this.coeffs_x[a] = ins.readDouble();
        }
 
        this.coeffs_y = new double[(int) coeffsize_y];
        for (int a = 0; a < this.coeffsize_y; a++) {
            this.coeffs_y[a] = ins.readDouble();
        }
 
        this.coeffs_z = new double[(int) coeffsize_z];
        for (int a = 0; a < this.coeffsize_z; a++) {
            this.coeffs_z[a] = ins.readDouble();
        }
 
        this.coeffs_yaw = new double[(int) coeffsize_yaw];
        for (int a = 0; a < this.coeffsize_yaw; a++) {
            this.coeffs_yaw[a] = ins.readDouble();
        }
 
        this.t_start = ins.readDouble();
 
        this.t_end = ins.readDouble();
 
    }
 
    public librav_lcm_msgs.PolyCurveSegment_t copy()
    {
        librav_lcm_msgs.PolyCurveSegment_t outobj = new librav_lcm_msgs.PolyCurveSegment_t();
        outobj.coeffsize_x = this.coeffsize_x;
 
        outobj.coeffsize_y = this.coeffsize_y;
 
        outobj.coeffsize_z = this.coeffsize_z;
 
        outobj.coeffsize_yaw = this.coeffsize_yaw;
 
        outobj.coeffs_x = new double[(int) coeffsize_x];
        if (this.coeffsize_x > 0)
            System.arraycopy(this.coeffs_x, 0, outobj.coeffs_x, 0, this.coeffsize_x); 
        outobj.coeffs_y = new double[(int) coeffsize_y];
        if (this.coeffsize_y > 0)
            System.arraycopy(this.coeffs_y, 0, outobj.coeffs_y, 0, this.coeffsize_y); 
        outobj.coeffs_z = new double[(int) coeffsize_z];
        if (this.coeffsize_z > 0)
            System.arraycopy(this.coeffs_z, 0, outobj.coeffs_z, 0, this.coeffsize_z); 
        outobj.coeffs_yaw = new double[(int) coeffsize_yaw];
        if (this.coeffsize_yaw > 0)
            System.arraycopy(this.coeffs_yaw, 0, outobj.coeffs_yaw, 0, this.coeffsize_yaw); 
        outobj.t_start = this.t_start;
 
        outobj.t_end = this.t_end;
 
        return outobj;
    }
 
}

