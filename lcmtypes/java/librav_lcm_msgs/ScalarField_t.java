/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package librav_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ScalarField_t implements lcm.lcm.LCMEncodable
{
    public int size_x;
    public int size_y;
    public double value[][];
 
    public ScalarField_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xde0a5393ac2edb03L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(librav_lcm_msgs.ScalarField_t.class))
            return 0L;
 
        classes.add(librav_lcm_msgs.ScalarField_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.size_x); 
 
        outs.writeInt(this.size_y); 
 
        for (int a = 0; a < this.size_x; a++) {
            for (int b = 0; b < this.size_y; b++) {
                outs.writeDouble(this.value[a][b]); 
            }
        }
 
    }
 
    public ScalarField_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ScalarField_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static librav_lcm_msgs.ScalarField_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        librav_lcm_msgs.ScalarField_t o = new librav_lcm_msgs.ScalarField_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.size_x = ins.readInt();
 
        this.size_y = ins.readInt();
 
        this.value = new double[(int) size_x][(int) size_y];
        for (int a = 0; a < this.size_x; a++) {
            for (int b = 0; b < this.size_y; b++) {
                this.value[a][b] = ins.readDouble();
            }
        }
 
    }
 
    public librav_lcm_msgs.ScalarField_t copy()
    {
        librav_lcm_msgs.ScalarField_t outobj = new librav_lcm_msgs.ScalarField_t();
        outobj.size_x = this.size_x;
 
        outobj.size_y = this.size_y;
 
        outobj.value = new double[(int) size_x][(int) size_y];
        for (int a = 0; a < this.size_x; a++) {
            if (this.size_y > 0)
                System.arraycopy(this.value[a], 0, outobj.value[a], 0, this.size_y);        }
 
        return outobj;
    }
 
}

