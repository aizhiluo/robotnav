/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package librav_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class CarCommand_t implements lcm.lcm.LCMEncodable
{
    public boolean update_servo;
    public boolean update_motor;
    public float servo;
    public float motor;
 
    public CarCommand_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x795d25c3afe20100L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(librav_lcm_msgs.CarCommand_t.class))
            return 0L;
 
        classes.add(librav_lcm_msgs.CarCommand_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte( this.update_servo ? 1 : 0); 
 
        outs.writeByte( this.update_motor ? 1 : 0); 
 
        outs.writeFloat(this.servo); 
 
        outs.writeFloat(this.motor); 
 
    }
 
    public CarCommand_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public CarCommand_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static librav_lcm_msgs.CarCommand_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        librav_lcm_msgs.CarCommand_t o = new librav_lcm_msgs.CarCommand_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.update_servo = ins.readByte()!=0;
 
        this.update_motor = ins.readByte()!=0;
 
        this.servo = ins.readFloat();
 
        this.motor = ins.readFloat();
 
    }
 
    public librav_lcm_msgs.CarCommand_t copy()
    {
        librav_lcm_msgs.CarCommand_t outobj = new librav_lcm_msgs.CarCommand_t();
        outobj.update_servo = this.update_servo;
 
        outobj.update_motor = this.update_motor;
 
        outobj.servo = this.servo;
 
        outobj.motor = this.motor;
 
        return outobj;
    }
 
}

