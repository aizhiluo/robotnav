/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package librav_lcm_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class VehicleState implements lcm.lcm.LCMEncodable
{
    public long id;
    public double position[];
    public double theta;
    public double speed;
    public librav_lcm_msgs.VehicleFootprint footprint;
 
    public VehicleState()
    {
        position = new double[2];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x385f535c024ee9c0L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(librav_lcm_msgs.VehicleState.class))
            return 0L;
 
        classes.add(librav_lcm_msgs.VehicleState.class);
        long hash = LCM_FINGERPRINT_BASE
             + librav_lcm_msgs.VehicleFootprint._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.id); 
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.position[a]); 
        }
 
        outs.writeDouble(this.theta); 
 
        outs.writeDouble(this.speed); 
 
        this.footprint._encodeRecursive(outs); 
 
    }
 
    public VehicleState(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public VehicleState(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static librav_lcm_msgs.VehicleState _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        librav_lcm_msgs.VehicleState o = new librav_lcm_msgs.VehicleState();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.id = ins.readLong();
 
        this.position = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.position[a] = ins.readDouble();
        }
 
        this.theta = ins.readDouble();
 
        this.speed = ins.readDouble();
 
        this.footprint = librav_lcm_msgs.VehicleFootprint._decodeRecursiveFactory(ins);
 
    }
 
    public librav_lcm_msgs.VehicleState copy()
    {
        librav_lcm_msgs.VehicleState outobj = new librav_lcm_msgs.VehicleState();
        outobj.id = this.id;
 
        outobj.position = new double[(int) 2];
        System.arraycopy(this.position, 0, outobj.position, 0, 2); 
        outobj.theta = this.theta;
 
        outobj.speed = this.speed;
 
        outobj.footprint = this.footprint.copy();
 
        return outobj;
    }
 
}

